// https://www.99-bottles-of-beer.net

component Main(start) (stop) {
    nodes { Match<int>, next PrintNext2Lines }
    net {
        :start -> (99 -> next -> match:data)
        -1 -> match:case[0] -> :stop
        match:else -> next
    }
}

component PrintNext2Lines(n int) (n int) {
    nodes {
        decr Decr<int>
        first PrintFirstLine
        second PrintSecondLine
    }
    net { :n -> first -> decr -> second -> :n }
}

// === First Line ===

const {
    firstLine1 string = '$0 bottles of beer on the wall, $0 bottles of beer.\n'
    firstLine2 string = '1 bottle of beer on the wall, 1 bottle of beer.'
    firstLine3 string = 'No more bottles of beer on the wall, no more bottles of beer.'
}

component PrintFirstLine(n int) (n int) {
    nodes { Match<int>, Println, Printf, Lock<int> }
    net {
        :n -> [match:data, lock:data]

        0 -> match:case[0] -> ($firstLine3 -> println)
        1 -> match:case[1] -> ($firstLine2 -> println)
        match:else -> [
            printf:args[0],
            ($firstLine1 -> printf:tpl)
        ]

        [println, printf:args[0]] -> lock:sig
        lock -> :n
    }
}

// === Second Line ===

const {
    secondLine1 string = 'Take one down and pass it around, $0 bottles of beer on the wall.\n\n'
    secondLine2 string = 'Take one down and pass it around, 1 bottle of beer on the wall.\n'
    secondLine3 string = 'Take one down and pass it around, no more bottles of beer on the wall.\n'
    secondLine4 string = 'Go to the store and buy some more, 99 bottles of beer on the wall.'
}

component PrintSecondLine(n int) (n int) {
    nodes { Match<int>, Println, Printf, Lock<int> }
    net {
        :n -> [match:data, lock:data]

        -1 -> match:case[0] -> ($secondLine4 -> println)
        0  -> match:case[1] -> ($secondLine3 -> println)
        1  -> match:case[2] -> ($secondLine2 -> println)
        match:else -> [
            printf:args[0],
            ($secondLine1 -> printf:tpl)
        ]

        [println, printf:args[0]] -> lock:sig
        lock:data -> :n
    }
}