import { io, image, fmt, runtime, streams }

def NewPixel(x int, y int, c image.RGBA) (pixel image.Pixel) {
	pb Struct<image.Pixel>
	---
	:x -> pb:x
	:y -> pb:y
	:c -> pb:color
	pb -> :pixel
}

def NewColor(r int, g int, b int, a int) (color image.RGBA) {
	cb Struct<image.RGBA>
	---
	:r -> cb:r
	:g -> cb:g
	:b -> cb:b
	:a -> cb:a
	cb -> :color
}

def NewStream(p image.Pixel) (s streams.Item<image.Pixel>) {
        sb Struct<streams.Item<image.Pixel>>
	---
	0 -> sb:idx
	:p -> sb:data
	true -> sb:last
	sb -> :s
}

def Main(start any) (stop any) {
	image.New, image.Encode
	NewPixel, NewColor, NewStream,
	io.WriteAll, printErr fmt.Println
	panic runtime.Panic
	---
	:start -> [
		0 -> [newColor:r, newColor:g, newColor:b, newColor:a],
		15 -> [newPixel:x, newPixel:y],
		'minimal.png' -> writeAll:filename
	]
	newColor -> newPixel:c
	newPixel -> newStream:p
	newStream:s -> new
	new:img -> encode:img
	encode:data -> writeAll:data
	[new:err, encode:err, writeAll:err] -> printErr
	[writeAll:res, printErr:res] -> :stop
	printErr:err -> panic
}
