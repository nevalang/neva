type MyVec vec<int>

type MyVec vec<
int>

type MyVec vec<
int
>

type MyVec vec<
    int
>

type { MyVec vec<int> }

type {
    MyVec vec<int> }

type {
    MyVec vec<int>
}

type {
    MyVec vec<int>

}

type {
    MyVec vec<
    int>
}

type { MyVec vec<
    int>
}

type { MyVec vec<
    int> }

type {
    MyVec vec<
    int> 

}

type {
    MyVec vec<
        int
    >
}

type {
    MyVec1 Vec<int>
    pub MyVec2 Vec<int>
}

type {
    MyVec1 Vec<int>

    pub MyVec2 Vec<int>
}

type {
    pub MyMap map<string, int>
}

type {
    MyMap map<string,
        int>
}

type {
    MyMap map<string,
        int
    >
}

type {
    MyMap map<
        string,
        int
    >
}

type {
    MyInt int

    MyVec vec<int>

    pub MyMap map<
        string,
        int
    >
}

type {

    MyInt int

    MyVec vec<int>

    pub MyMap map<
        string,
        int
    >

}

type {
    MyMap1<T, Y> map<T, Y>

    MyMap2<T int, Y> map<T, Y>

    MyMap3<T int, Y vec<float>> map<T, Y>
}

type {
    MyMap3<T int, Y vec<
        float
    >> map<T, Y>
}

type {
    MyMap3<
        T int,
        Y vec<float>
    > map<T, Y>
}

type {
    MyMap3<
        T int,
        Y vec<float>
    > map<T, vec<Y>>
}

type {
    MyMap3<
        T int,
        Y vec<float>
    > map<
        T, vec<Y>
    >
}